/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "bank.h"
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <strings.h>
#include <string.h>
#include <termios.h>
#include <time.h>
#include <sys/select.h>
#include <fcntl.h>
#include <sys/file.h>
#include <asm-generic/errno-base.h>
#include <assert.h>
#include <linux/if_packet.h>
#include <sys/ioctl.h>
#include <unistd.h>


int getAmount(char lineRead[],char *secondArg)
{
        int i=0;
        int j=0;

        char firstArg[50];
//printf("In");
        //FIRST ARGUMENT
        while(lineRead[i] != 32 )               // 32 is " " - empty space
        {
                firstArg[i]=lineRead[i];
                i++;
                if(lineRead[i] == '\n') { firstArg[i]= '\n'; break; }
                if(lineRead[i] == 32) { firstArg[i]= '\0'; }
        }
//printf("In2 - first argument is:%s",firstArg);
        //SECOND ARGUMENT
        if(lineRead[i] != '\n')
        {
//printf("In3");
                while(lineRead[i+1] !='\n' )
                {
                        secondArg[j]=lineRead[i+1];
                        i++;
                        j++;
//printf("In function argument is:-%s-",secondArg);

                        if(lineRead[i+1] == '\n') { secondArg[j]= '\0'; return 1; }
                }
        }
        return 0;
}

int *
create_1_svc(trans *argp, struct svc_req *rqstp)
{
	static int  result=0;
	FILE *idList;
	char comm[100];
	int com;
	int truth=0;

	idList = fopen("idList.txt","a+");
	sprintf(comm,"grep -rwq idList.txt -e \"id%d\"",argp->id);
	com = system(comm);

	if(com==0)//if the name is on the list, don't add
      	{
		printf("CLIENT : %d - ID ALREADY EXISTS\n", argp->id);
	        truth = 0;
	}
	else
	{
        	printf("CLIENT : %d - ID ADDED\n", argp->id);
        	fprintf(idList,"id%d\n",argp->id);
                truth = 1;
	}
	fclose(idList);

	//TRUTH IS 1 IF ACCOUNT IS ADDED
	//TRUTH IS SMTH ELSE, THEN ACCOUNT ALREADY EXISTS

	if(truth == 1)	result = 1;
	else		result = -1;

	return &result;
}

int *
add_1_svc(trans *argp, struct svc_req *rqstp)
{
	static int  result = -1;

	int i;

	FILE *idList;
	idList = fopen("idList.txt","a+");
	char line[50];

        char comm[100];
        int com;


        sprintf(comm,"grep -rwq idList.txt -e \"id%d\"",argp->id);
        com = system(comm);

        if(com==0)//if the name is on the list, don't add
        {
                printf("CLIENT : %d - ID ALREADY EXISTS\n", argp->id);
                truth = 0;
        }
        else
        {
                printf("CLIENT : %d - ID ADDED\n", argp->id);
                fprintf(idList,"id%d\n",argp->id);
                truth = 1;
        }
        fclose(idList);
 













//GO THROUGH THE LIST AND FIND THE ID, GET INITIAL AMOUNT,
//REMOVE LINE FROM THE LIST, ADD THE CURRENT VAL TO THE INITIAL ONE,
//ADD A NEW RECORD IN THE LIST WITH THE ID AND NEW VALUE
	while (1)
	{
		if (fgets(line,51,idList) == NULL) break;
		printf("line is:-%s-",line);

		//line[strcspn(line, "\n")] = '\0';

	        char *argument=(char*)malloc(50*sizeof(char));
        	argument[0]='\0';

		i=getAmount(line,argument);

		printf("second argument is:-%s-",argument);

		

		//if(getAmount(line,argument)!=1) return &result;

		//if(strcmp(nameClient,line)==0)
		//{
                  //      write(ns, "MESSAGE SENT", 30);
                    //    close(ns);
		//	close(soc);
                  //      continue;
		//}


	}



        printf("Received info on add!\n");


	return &result;
}

int *
withdraw_1_svc(trans *argp, struct svc_req *rqstp)
{
	static int  result;

	/*
	 * insert server code here
	 */

        printf("Received info on withdraw!\n");



	return &result;
}

int *
inquiry_1_svc(trans *argp, struct svc_req *rqstp)
{
	static int  result;

	/*
	 * insert server code here
		 */


        printf("Received info on inquiry!\n");


	return &result;
}
